# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
import logging
import os
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, ParseMode, ChatAction
from telegram.ext import (
    Updater,
    CommandHandler,
    CallbackQueryHandler,
    CallbackContext,
    MessageHandler,
    Filters,
    JobQueue,
)
import fitz  # PyMuPDF
from transformers import pipeline
from dotenv import load_dotenv


# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ API —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv('TELEGRAM_API_TOKEN')

if not API_TOKEN:
    logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω API —Ç–æ–∫–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_API_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    exit(1)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF
def extract_text_from_pdf(pdf_path):
    try:
        doc = fitz.open(pdf_path)
        text = ""
        for page_num in range(len(doc)):
            page = doc.load_page(page_num)
            text += page.get_text("text")
        logger.info("–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ PDF.")
        return text
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF: {e}")
        return ""

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
PDF_PATH = r'Documents/–ö–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—ã–π –¥–æ–≥–æ–≤–æ—Ä.pdf'  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—ã—Ä—É—é —Å—Ç—Ä–æ–∫—É –∏–ª–∏ –ø—Ä—è–º—ã–µ —Å–ª—ç—à–∏
if not os.path.exists(PDF_PATH):
    logger.error(f"–§–∞–π–ª PDF –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {PDF_PATH}")
    pdf_text = ""
else:
    pdf_text = extract_text_from_pdf(PDF_PATH)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ QnA
try:
    question_answerer = pipeline("question-answering", model="distilbert-base-uncased-distilled-squad")
    logger.info("–ú–æ–¥–µ–ª—å QnA —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏ QnA: {e}")
    question_answerer = None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
def start(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("–§—É–Ω–∫—Ü–∏–∏", callback_data='functions')],
        [InlineKeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data='contacts')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_message = (
        "**–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!** üëã\n\n"
        "–Ø –≤–∞—à —á–∞—Ç-–±–æ—Ç —Å–æ—Ü–ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –†–ñ–î. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ:\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–§—É–Ω–∫—Ü–∏–∏', —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º."
    )
    try:
        with open('static/logo.png', 'rb') as photo:
            context.bot.send_photo(
                chat_id=update.effective_chat.id,
                photo=photo,
                caption=welcome_message,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
    except FileNotFoundError:
        logger.error("–§–∞–π–ª logo.png –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ static.")
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=welcome_message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
def help_command(update: Update, context: CallbackContext):
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É PDF."
    )
    context.bot.send_message(chat_id=update.effective_chat.id, text=help_text, parse_mode=ParseMode.MARKDOWN)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
def button(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {query.data}")

    if query.data == 'functions':
        functions_text = (
            "**–§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:**\n"
            "1. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª—å–≥–æ—Ç–∞—Ö\n"
            "2. –ü–æ–º–æ—â—å –≤ —Ç—Ä—É–¥–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö\n"
            "3. –°–≤—è–∑—å —Å HR\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."
        )
        context.bot.send_message(chat_id=query.message.chat_id, text=functions_text, parse_mode=ParseMode.MARKDOWN)

    elif query.data == 'contacts':
        contacts_text = (
            "**–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏:**\n"
            "üìß Email: support@rzd.ru\n"
            "üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (495) 123-45-67\n"
            "üïí –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: –ü–Ω-–ü—Ç, 9:00-18:00"
        )
        context.bot.send_message(chat_id=query.message.chat_id, text=contacts_text, parse_mode=ParseMode.MARKDOWN)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏
def send_answer(context: CallbackContext):
    user_question, chat_id = context.job.context
    try:
        result = question_answerer(question=user_question, context=pdf_text)
        answer = result.get('answer', '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å.')
        score = result.get('score', 0)
        logger.info(f"–û—Ç–≤–µ—Ç: {answer} (score: {score})")
        context.bot.send_message(chat_id=chat_id, text=f"**–û—Ç–≤–µ—Ç:** {answer}", parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        context.bot.send_message(chat_id=chat_id, text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def handle_question(update: Update, context: CallbackContext):
    user_question = update.message.text.strip()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–æ–ø—Ä–æ—Å: {user_question}")
    
    if not user_question.startswith('/'):
        chat_id = update.effective_chat.id

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ "typing"
        context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
        context.job_queue.run_once(send_answer, 1, context=(user_question, chat_id))

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    updater = Updater(API_TOKEN, use_context=True)
    dp = updater.dispatcher

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("help", help_command))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
    dp.add_handler(CallbackQueryHandler(button))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_question))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    updater.start_polling()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    updater.idle()

if __name__ == '__main__':
    main()
